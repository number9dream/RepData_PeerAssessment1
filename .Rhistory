plot(0, 0, main = expression(theta))
serialize()
jpeg()
help(jpeg)
gzfile()
axis()
windows()
help(windows)
help(xyplot
)
help(xyplot)
explot()
xyplot()
bwplot()
barchart()
boxplot()
boxplot()
x <- rnorm(10)
boxplot(x)
library(lattice)
library(nlme)
xyplot(distance ~ age | Subject, data = Orthodont)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
help(BodyWeight)
help(mtext)
help(lines)
panel.xyplot
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
plot
barchar
barchart
barchart()
barchart()
splom()
quartz
quartz()
pdf()
file()
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
nxt()
?c
z
z <- 555
c(z,555,z)
z * 2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
bye()
swirl()
swirl()
bye()
library(swirl)
library("swirl")
swirl()
1:20
pi:10
15:1
?:
:
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,
| times = 40)
rep(0,times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
-
0
swirl()
num_vec <- (0.5,55,-10,6)
num_vect <- (0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- c(num_vect<1)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "your_name_here")
c(my_char, "J")
my_name <- c(my_char, "your_name_here")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
install_from_swirl("R_Programming")
install_from_swirl('R_Programming')
bye()
install_from_swirl('R_Programming')
rm
rm()
install_from_swirl()
install_from_swirl("R_Programming")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("R_Programming")
swirl()
0
swirl()
packageVersion("swirl")
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x<- 5 + 7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?C
?c
z
c(z,555,z)
z * 2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect<-c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"J")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x < c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData==NA
sum(myNA)
myDATA
myData
0/0
Inf-Inf
0
bye()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo","bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
matrx(1:20,4,5)
matrix(1:20,4,5)
myMatrix2 <- matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients <- ("Bill","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData <-data.frame(patients, myMatrix)
myDa
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData,cnames)
colnames(myData) <- cnames
myData
bye()
data <- read.csv("C:/Junjie/Study Stuff/Coursera/Cleaning Data/getdata-data-ss06hid(1).csv")
View(data)
data[AGS>3]
data[data$AGS>3]
data(ACR=3)
data[ACR=3]
as.logical(data,"ACR"=3)
logical(data,"ACR"=3)
with(data,ACR==3,AGS==6)
which(with(data,ACR==3,AGS==6))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
class xyplot
nlme
BodyWiehgt
BodyWeight
Diet
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
class(p)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
require(ggplot2)
install.packages("ggplot2")
require(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
g <- ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies, aes(votes, rating))
)
?aes
movies
head(movies)
ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
setwd("C:/Junjie/Study Stuff/Coursera/Reproducible Research")
downloadurl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(!file.exists("repdata-data-activity.zip") ) download.file(downloadurl, "repdata-data-activity.zip")
if(!file.exists("activity.csv")) unzip("repdata-data-activity.zip")
fileData <- read.csv("activity.csv",na.strings="NA",nrows=17568)
fileDate <- data.frame(as.Date(strptime(fileData[,2],"%Y-%m-%e")))
fileCols <- colnames(fileData)
fileData <- cbind(fileData[,1],fileDate,fileData[,3])
colnames(fileData) <- fileCols
completeFileData <- na.omit(fileData)
sumData <- aggregate(completeFileData$steps,list(date=completeFileData$date),sum)
## display histogram of the total number of steps taken each day
hist(sumData$x,col="red",xlab="Number of steps",main="Total Number of Steps Taken Each Day")
## mean of the total number of steps taken each day
meanData <- mean(sumData$x,na.rm=TRUE)
## median of the total number of steps taken each day
mediaData <- median(sumData$x,na.rm=TRUE)
## What is the average daily activity pattern? (ignore missing data na.rm=TRUE)
averageData <- aggregate(completeFileData$steps,list(interval=completeFileData$interval),mean)
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
plot(averageData$interval,averageData$x,type="l",ylab="Average number of steps taken",xlab="Time Interval",main="Average Number of Steps Taken (5-min Interval)")
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
maxTimeInterval <- averageData[which.max(averageData$x),1]
## imputing missing values
sum(is.na(fileData$steps))
naFileData <- fileData[is.na(fileData$steps),]
View(averageData)
View(naFileData)
class(naFileData)
merge(naFileData,averageData,by.x="interval",by.y="interval")
mergeData <- merge(naFileData,averageData,by.x="interval",by.y="interval")
View(mergeData)
View(fileData)
naFileData <- cbind(mergeData[,4],mergeData[,3],mergeData[,1])
View(naFileData)
colnames(naFileData) <- c("steps","date","interval")
View(naFileData)
class(naFileData)
naFileData <- as.dataframe(cbind(mergeData[,4],mergeData[,3],mergeData[,1]))
naFileData <- as.data.frame(cbind(mergeData[,4],mergeData[,3],mergeData[,1]))
View(naFileData)
colnames(naFileData) <- c("steps","date","interval")
View(naFileData)
updatedFileData <- rbind(completeFileData,naFileData)
sapply(naFileData, class)
naFileData <- fileData[is.na(fileData$steps),]
sapply(naFileData, class)
mergeData <- merge(naFileData,averageData,by.x="interval",by.y="interval")
sapply(mergeData, class)
library(sqldf)
naFileData <- data.frame(mergeData[,4],mergeData[,3],mergeData[,1])
View(naFileData)
sapply(naFileData, class)
naFileData <- fileData[is.na(fileData$steps),]
mergeData <- merge(naFileData,averageData,by.x="interval",by.y="interval")
naFileData <- data.frame(mergeData[,4],mergeData[,3],mergeData[,1])
colnames(naFileData) <- c("steps","date","interval")
updatedFileData <- rbind(completeFileData,naFileData)
View(updatedFileData)
View(fileData)
updatedFileData <- as.data.frame(rbind(completeFileData,naFileData))
View(updatedFileData)
sapply(updatedFileData, class)
updatedFileData <- as.data.frame(rbind(completeFileData,naFileData),row.names=NULL)
View(updatedFileData)
View(updatedFileData)
View(updatedFileData)
updatedFileData <- rbind(completeFileData,naFileData)
View(updatedFileData)
sapply(updatedFileData, class)
naFileData <- fileData[is.na(fileData$steps),]
mergeData <- merge(naFileData,averageData,by.x="interval",by.y="interval")
naFileData <- data.frame(mergeData[,4],mergeData[,3],mergeData[,1])
#colnames(naFileData) <- c("steps","date","interval")
updatedFileData <- rbind(completeFileData,naFileData)
naFileData <- fileData[is.na(fileData$steps),]
mergeData <- merge(naFileData,averageData,by.x="interval",by.y="interval")
naFileData <- data.frame(mergeData[,4],mergeData[,3],mergeData[,1])
colnames(naFileData) <- c("steps","date","interval")
updatedFileData <- rbind(completeFileData,naFileData)
View(updatedFileData)
sumData <- aggregate(updatedFileData$steps,list(date=updatedFileData$date),sum)
hist(sumData$x,col="red",xlab="Number of steps",main="Total Number of Steps Taken Each Day")
meanData <- mean(sumData$x,na.rm=TRUE)
mediaData <- median(sumData$x,na.rm=TRUE)
sumData <- aggregate(completeFileData$steps,list(date=completeFileData$date),sum)
hist(sumData$x,col="red",xlab="Number of steps",main="Total Number of Steps Taken Each Day")
meanData <- mean(sumData$x,na.rm=TRUE)
medianData <- median(sumData$x,na.rm=TRUE)
sum(is.na(updatedFileData$steps))
sumData <- aggregate(updatedFileData$steps,list(date=updatedFileData$date),sum)
meanData <- mean(sumData$x,na.rm=TRUE)
medianData <- median(sumData$x,na.rm=TRUE)
meanData <- mean(sumData$x)
View(sumData)
sumData <- aggregate(completeFileData$steps,list(date=completeFileData$date),sum)
View(sumData)
fileData[is.na(fileData)] <- 0
View(fileData)
completeFileData <- na.omit(fileData)
sumData <- aggregate(completeFileData$steps,list(date=completeFileData$date),sum)
hist(sumData$x,col="red",xlab="Number of steps",main="Total Number of Steps Taken Each Day")
meanData <- mean(sumData$x,na.rm=TRUE)
medianData <- median(sumData$x,na.rm=TRUE)
if(!file.exists("repdata-data-activity.zip") ) download.file(downloadurl, "repdata-data-activity.zip")
if(!file.exists("activity.csv")) unzip("repdata-data-activity.zip")
fileData <- read.csv("activity.csv",na.strings="NA",nrows=17568)
fileDate <- data.frame(as.Date(strptime(fileData[,2],"%Y-%m-%e")))
fileCols <- colnames(fileData)
fileData <- cbind(fileData[,1],fileDate,fileData[,3])
colnames(fileData) <- fileCols
completeFileData <- na.omit(fileData)
fileData[is.na(fileData)] <- 0
sumData <- aggregate(fileData$steps,list(date=fileData$date),sum)
hist(sumData$x,col="red",xlab="Number of steps",main="Total Number of Steps Taken Each Day")
meanData <- mean(sumData$x,na.rm=TRUE)
medianData <- median(sumData$x,na.rm=TRUE)
averageData <- aggregate(fileData$steps,list(interval=fileData$interval),mean)
plot(averageData$interval,averageData$x,type="l",ylab="Average number of steps taken",xlab="Time Interval",main="Average Number of Steps Taken (5-min Interval)")
maxTimeInterval <- averageData[which.max(averageData$x),1]
sum(is.na(fileData$steps))
naFileData <- fileData[is.na(fileData$steps),]
fileData <- read.csv("activity.csv",na.strings="NA",nrows=17568)
fileDate <- data.frame(as.Date(strptime(fileData[,2],"%Y-%m-%e")))
fileCols <- colnames(fileData)
fileData <- cbind(fileData[,1],fileDate,fileData[,3])
colnames(fileData) <- fileCols
processedFileData[is.na(fileData)] <- 0
processedFileData <- fileData
processedFileData[is.na(processedFileData)] <- 0
sumData <- aggregate(processedFileData$steps,list(date=processedFileData$date),sum)
hist(sumData$x,col="red",xlab="Number of steps",main="Total Number of Steps Taken Each Day")
meanData <- mean(sumData$x,na.rm=TRUE)
medianData <- median(sumData$x,na.rm=TRUE)
averageData <- aggregate(processedFileData$steps,list(interval=processedFileData$interval),mean)
plot(averageData$interval,averageData$x,type="l",ylab="Average number of steps taken",xlab="Time Interval",main="Average Number of Steps Taken (5-min Interval)")
maxTimeInterval <- averageData[which.max(averageData$x),1]
sum(is.na(fileData$steps))
mergeData <- merge(fileData,averageData,by.x="interval",by.y="interval")
View(mergeData)
View(fileData)
mergeData[is.na(mergeData)] <- mergeData[,4]
mergeData[is.na(mergeData)] <- mergeData[is.na(mergeData),4]
View(mergeData)
mergeData$steps[is.na(mergeData$steps)] <- mergeData$x[is.na(mergeData$steps)]
View(mergeData)
mergeData$x <- NULL
View(mergeData)
sumData <- aggregate(mergeData$steps,list(date=mergeData$date),sum)
hist(sumData$x,col="red",xlab="Number of steps",main="Total Number of Steps Taken Each Day")
meanData <- mean(sumData$x,na.rm=TRUE)
medianData <- median(sumData$x,na.rm=TRUE)
weekdays(mergeData$date)
weekdays(mergeData$date, abbreviate=TRUE)
weekdays(as.POSIXlt(mergeData$date)$wday)
as.POSIXlt(mergeData$date)$wday
wday <- as.POSIXlt(mergeData$date)$wday
drop
drop("wday")
clear
drop(wday)
wday <- data.frame(as.POSIXlt(mergeData$date)$wday)
class(wday)
sapply(wday,class)
wday[wday>1]
wday[wday>1] <- c("Yes")
wday
head(wday)
sapply(wday,class)
wday <- data.frame(as.factor(as.POSIXlt(mergeData$date)$wday))
View(wday)
wday <- data.frame(as.POSIXlt(mergeData$date)$wday)
wday[wday=0|wday=1]
wday[wday==0|wday==1]
wday[wday==0|wday==1] <- "weekend"
wday[!(wday==0|wday==1)] <- "weekday"
View(wday)
wday <- as.factor(wday)
wday <- as.POSIXlt(mergeData$date)$wday
wday[wday==0|wday==1] <- "weekend"
wday[!(wday==0|wday==1)] <- "weekday"
wday <- as.factor(wday)
mergeData1 <- data.frame(mergeData,wday)
sapply(mergeData1,class)
plot(mergeData1$interval,mergeData1$x,type="l",ylab="Average number of steps taken",xlab="Time Interval",main="Average Number of Steps Taken (5-min Interval)")
library(lattice)
mergeData <- data.frame(mergeData,wday)
wdayAverageData <- aggregate(mergeData$steps,list(interval=mergeData$interval,wday=mergeData$wday),mean)
View(wdayAverageData)
View(wdayAverageData)
View(mergeData)
wday <- as.POSIXlt(mergeData$date)$wday
wday[wday==0|wday==1] <- "weekend"
wday[!(wday==0|wday==1)] <- "weekday"
wday <- as.factor(wday)
wday <- as.POSIXlt(mergeData$date)$wday
wday[wday==0|wday==1] <- "weekend"
wday[!(wday==0|wday==1)] <- "weekday"
wday <- as.POSIXlt(mergeData$date)$wday
wday[wday==0|wday==1] <- "weekend"
wday[!(wday=="weekend")] <- "weekday"
wday <- as.factor(wday)
mergeData <- data.frame(mergeData,wday)
View(mergeData)
mergeData$wday.1 <- NULL
mergeData$wday <- NULL
View(mergeData)
mergeData <- data.frame(mergeData,wday)
wdayAverageData <- aggregate(mergeData$steps,list(interval=mergeData$interval,wday=mergeData$wday),mean)
xyplot(mergeData$x~mergeData$interval|mergeData$wday,type="l")
xyplot(mergeData$x~mergeData$interval|mergeData$wday,mergeData,type="l")
xyplot(mergeData$x~mergeData$interval|mergeData$wday,data=mergeData,type="l")
View(mergeData)
attach(mergeData)
xyplot(mergeData$x~mergeData$interval|mergeData$wday,data=mergeData,type="l")
xyplot(mergeData$x~mergeData$interval|mergeData$wday,type="l")
View(mergeData)
View(wdayAverageData)
xyplot(wdayAverageData$x~wdayAverageData$interval|wdayAverageData$wday,type="l")
xyplot(wdayAverageData$x~wdayAverageData$interval|wdayAverageData$wday,type="l",layout=c(1,2))
library(lattice)
require(lattice)
xyplot(wdayAverageData$x~wdayAverageData$interval|wdayAverageData$wday,type="l",layout=c(1,2),xlab="Number of steps",ylab="Interval")
install.packages("knitr")
setwd("~/GitHub/RepData_PeerAssessment1")
fileData <- read.csv("activity.csv",na.strings="NA",nrows=17568)
